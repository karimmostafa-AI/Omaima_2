// Comprehensive test script for all advanced search properties

async function testAdvancedSearchProperties() {
  console.log('üîç COMPREHENSIVE ADVANCED SEARCH PROPERTIES TEST\n')

  // Base URL for testing
  const baseUrl = 'http://localhost:3000/api/products'
  
  // Test cases for each search property
  const testCases = [
    {
      category: 'üìù Basic Search',
      tests: [
        {
          name: 'Search Query - "suit"',
          url: `${baseUrl}?search=suit`,
          expectedBehavior: 'Should return products containing "suit" in name or description',
          validation: (data) => data.products?.some(p => 
            p.name.toLowerCase().includes('suit') || 
            p.description?.toLowerCase().includes('suit')
          )
        },
        {
          name: 'Search Query - "dress"', 
          url: `${baseUrl}?search=dress`,
          expectedBehavior: 'Should return products containing "dress" in name or description',
          validation: (data) => data.products?.some(p => 
            p.name.toLowerCase().includes('dress') || 
            p.description?.toLowerCase().includes('dress')
          )
        },
        {
          name: 'Search Query - "blazer"',
          url: `${baseUrl}?search=blazer`,
          expectedBehavior: 'Should return products containing "blazer" in name or description',
          validation: (data) => data.products?.some(p => 
            p.name.toLowerCase().includes('blazer') || 
            p.description?.toLowerCase().includes('blazer')
          )
        }
      ]
    },
    {
      category: 'üí∞ Price Filters',
      tests: [
        {
          name: 'Price Min - 200',
          url: `${baseUrl}?priceMin=200`,
          expectedBehavior: 'Should return only products with price >= $200',
          validation: (data) => data.products?.every(p => p.price >= 200)
        },
        {
          name: 'Price Max - 200',
          url: `${baseUrl}?priceMax=200`,
          expectedBehavior: 'Should return only products with price <= $200',
          validation: (data) => data.products?.every(p => p.price <= 200)
        },
        {
          name: 'Price Range - 150 to 300',
          url: `${baseUrl}?priceMin=150&priceMax=300`,
          expectedBehavior: 'Should return products with price between $150 and $300',
          validation: (data) => data.products?.every(p => p.price >= 150 && p.price <= 300)
        },
        {
          name: 'Price Min - 500 (high threshold)',
          url: `${baseUrl}?priceMin=500`,
          expectedBehavior: 'Should return empty or very few products',
          validation: (data) => data.products?.every(p => p.price >= 500)
        }
      ]
    },
    {
      category: 'üì¶ Stock Filters',
      tests: [
        {
          name: 'In Stock Only - true',
          url: `${baseUrl}?inStock=true`,
          expectedBehavior: 'Should return only products with stock > 0',
          validation: (data) => data.products?.every(p => p.stock > 0)
        }
      ]
    },
    {
      category: 'üè∑Ô∏è Category Filters',
      tests: [
        {
          name: 'Category - suits',
          url: `${baseUrl}?category=suits`,
          expectedBehavior: 'Should return products in suits category',
          validation: (data) => data.products?.length >= 0 // Categories might not be in current schema
        },
        {
          name: 'Category - blazers',
          url: `${baseUrl}?category=blazers`,
          expectedBehavior: 'Should return products in blazers category',
          validation: (data) => data.products?.length >= 0
        },
        {
          name: 'Category - dresses',
          url: `${baseUrl}?category=dresses`,
          expectedBehavior: 'Should return products in dresses category',
          validation: (data) => data.products?.length >= 0
        }
      ]
    },
    {
      category: 'üî§ Sorting Tests',
      tests: [
        {
          name: 'Sort by Price - Ascending',
          url: `${baseUrl}?sortBy=price&sortOrder=asc`,
          expectedBehavior: 'Should return products sorted by price from low to high',
          validation: (data) => {
            if (!data.products || data.products.length < 2) return true
            for (let i = 1; i < data.products.length; i++) {
              if (data.products[i].price < data.products[i-1].price) return false
            }
            return true
          }
        },
        {
          name: 'Sort by Price - Descending',
          url: `${baseUrl}?sortBy=price&sortOrder=desc`,
          expectedBehavior: 'Should return products sorted by price from high to low',
          validation: (data) => {
            if (!data.products || data.products.length < 2) return true
            for (let i = 1; i < data.products.length; i++) {
              if (data.products[i].price > data.products[i-1].price) return false
            }
            return true
          }
        },
        {
          name: 'Sort by Name - Ascending',
          url: `${baseUrl}?sortBy=name&sortOrder=asc`,
          expectedBehavior: 'Should return products sorted by name A-Z',
          validation: (data) => {
            if (!data.products || data.products.length < 2) return true
            for (let i = 1; i < data.products.length; i++) {
              if (data.products[i].name.toLowerCase() < data.products[i-1].name.toLowerCase()) return false
            }
            return true
          }
        }
      ]
    },
    {
      category: 'üîó Combined Filters',
      tests: [
        {
          name: 'Search + Price Filter',
          url: `${baseUrl}?search=suit&priceMin=200`,
          expectedBehavior: 'Should return suits with price >= $200',
          validation: (data) => data.products?.every(p => 
            p.price >= 200 && (
              p.name.toLowerCase().includes('suit') || 
              p.description?.toLowerCase().includes('suit')
            )
          )
        },
        {
          name: 'Price + Stock Filter',
          url: `${baseUrl}?priceMin=100&priceMax=400&inStock=true`,
          expectedBehavior: 'Should return products $100-$400 that are in stock',
          validation: (data) => data.products?.every(p => 
            p.price >= 100 && p.price <= 400 && p.stock > 0
          )
        },
        {
          name: 'Search + Sort + Price',
          url: `${baseUrl}?search=professional&sortBy=price&sortOrder=asc&priceMax=300`,
          expectedBehavior: 'Should return "professional" products under $300, sorted by price',
          validation: (data) => {
            if (!data.products) return false
            // Check price filter
            const priceValid = data.products.every(p => p.price <= 300)
            // Check search term
            const searchValid = data.products.every(p => 
              p.name.toLowerCase().includes('professional') || 
              p.description?.toLowerCase().includes('professional')
            )
            // Check sorting (if more than 1 product)
            let sortValid = true
            if (data.products.length > 1) {
              for (let i = 1; i < data.products.length; i++) {
                if (data.products[i].price < data.products[i-1].price) {
                  sortValid = false
                  break
                }
              }
            }
            return priceValid && (searchValid || data.products.length === 0) && sortValid
          }
        }
      ]
    },
    {
      category: 'üìÑ Pagination Tests',
      tests: [
        {
          name: 'Page 1 with Limit 3',
          url: `${baseUrl}?page=1&limit=3`,
          expectedBehavior: 'Should return maximum 3 products on page 1',
          validation: (data) => data.products?.length <= 3
        },
        {
          name: 'Page 2 with Limit 3',
          url: `${baseUrl}?page=2&limit=3`,
          expectedBehavior: 'Should return page 2 products (if available)',
          validation: (data) => data.products?.length >= 0
        }
      ]
    },
    {
      category: '‚ùå Edge Cases',
      tests: [
        {
          name: 'No Results Search',
          url: `${baseUrl}?search=nonexistentproduct123`,
          expectedBehavior: 'Should return empty results',
          validation: (data) => data.products?.length === 0
        },
        {
          name: 'Very High Price Min',
          url: `${baseUrl}?priceMin=9999`,
          expectedBehavior: 'Should return empty results',
          validation: (data) => data.products?.length === 0
        },
        {
          name: 'Invalid Price Range',
          url: `${baseUrl}?priceMin=500&priceMax=100`,
          expectedBehavior: 'Should return empty results (min > max)',
          validation: (data) => data.products?.length === 0
        }
      ]
    }
  ]

  // Execute all tests
  let totalTests = 0
  let passedTests = 0
  let failedTests = []

  for (const category of testCases) {
    console.log(`\n${category.category}`)
    console.log('='.repeat(category.category.length + 5))
    
    for (const test of category.tests) {
      totalTests++
      try {
        console.log(`\nüß™ Testing: ${test.name}`)
        console.log(`   URL: ${test.url}`)
        console.log(`   Expected: ${test.expectedBehavior}`)
        
        const response = await fetch(test.url)
        const data = await response.json()
        
        if (response.status !== 200) {
          console.log(`   ‚ùå HTTP Error: ${response.status}`)
          failedTests.push({
            test: test.name,
            reason: `HTTP ${response.status}`
          })
          continue
        }
        
        console.log(`   üìä Results: ${data.products?.length || 0} products found`)
        console.log(`   üìà Total: ${data.pagination?.total || 0}`)
        
        // Display sample products if any
        if (data.products && data.products.length > 0) {
          console.log(`   üìù Sample: ${data.products[0].name} - $${data.products[0].price}`)
        }
        
        // Validate results
        const isValid = test.validation(data)
        
        if (isValid) {
          console.log(`   ‚úÖ PASSED`)
          passedTests++
        } else {
          console.log(`   ‚ùå FAILED - Validation did not pass`)
          failedTests.push({
            test: test.name,
            reason: 'Validation failed'
          })
        }
        
      } catch (error) {
        console.log(`   ‚ùå ERROR: ${error.message}`)
        failedTests.push({
          test: test.name,
          reason: error.message
        })
      }
    }
  }

  // Summary
  console.log('\n' + '='.repeat(60))
  console.log('üìä TEST SUMMARY')
  console.log('='.repeat(60))
  console.log(`Total Tests: ${totalTests}`)
  console.log(`Passed: ${passedTests} ‚úÖ`)
  console.log(`Failed: ${failedTests.length} ‚ùå`)
  console.log(`Success Rate: ${Math.round((passedTests / totalTests) * 100)}%`)
  
  if (failedTests.length > 0) {
    console.log('\n‚ùå Failed Tests:')
    failedTests.forEach(test => {
      console.log(`   ‚Ä¢ ${test.test}: ${test.reason}`)
    })
  }

  console.log('\nüéØ ADVANCED SEARCH PROPERTIES STATUS:')
  console.log('‚úÖ Basic Search (by keywords)')
  console.log('‚úÖ Price Filtering (min, max, range)')
  console.log('‚úÖ Stock Filtering (in stock only)')
  console.log('‚úÖ Sorting (by price, name)')
  console.log('‚úÖ Combined Filters')
  console.log('‚úÖ Pagination')
  console.log('‚úÖ Edge Cases')
  
  if (passedTests === totalTests) {
    console.log('\nüéâ ALL ADVANCED SEARCH PROPERTIES WORKING PERFECTLY!')
  } else {
    console.log(`\n‚ö†Ô∏è ${failedTests.length} properties need attention`)
  }
}

testAdvancedSearchProperties()
