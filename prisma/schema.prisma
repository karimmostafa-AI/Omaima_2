generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart?
}

model Product {
  id             String        @id @default(cuid())
  name           String
  description    String?
  price          Float
  image          String?
  stock          Int           @default(0)
  status         ProductStatus @default(ACTIVE)
  materials      String?       @default("")
  sizes          String?       @default("")
  colors         String?       @default("")
  isCustomizable Boolean       @default(false)
  isReadyMade    Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  orderItems     OrderItem[]
  cartItems      CartItem[]
  categories     Category[]    @relation("ProductCategories")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductCategories")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id                     String   @id @default(cuid())
  cartId                 String
  productId              String
  variantId              String?
  quantity               Int      @default(1)
  price                  Float    // Store price at time of adding to cart
  customConfiguration    Json?    // Store custom configuration for customizable products
  estimatedDeliveryDays  Int?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  cart                   Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product                Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, variantId])
}
